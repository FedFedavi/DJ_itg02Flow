import os
import logging
import django
from aiogram import Bot, Dispatcher, Router, types
from aiogram.types import FSInputFile
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from django.core.management.base import BaseCommand

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "Flower.settings")  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç
django.setup()

from main.models import Order, Product

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
API_TOKEN = "7792869223:AAHnV8lAFD0TiD2EhHYWFGc-ecLJfvoqiS4"

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()  # –î–ª—è FSM
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
def get_order_info(order_id):
    try:
        order = Order.objects.get(pk=order_id)
        products = order.products.all()
        product_details = "\n".join(
            [f"{product.name} - {product.price} ‚ÇΩ" for product in products]
        )
        order_info = (
            f"üõí –ó–∞–∫–∞–∑ #{order.id}\n"
            f"üì¶ –ü—Ä–æ–¥—É–∫—Ç—ã:\n{product_details}\n"
            f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {sum([p.price for p in products])} ‚ÇΩ\n"
            f"üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order.created_at.strftime('%d.%m.%Y')}\n"
            f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order.delivery_address}\n"  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –µ—Å—Ç—å delivery_address
            f"üìù –°—Ç–∞—Ç—É—Å: {order.get_status_display()}"
        )
        return order_info, [product.image.path for product in products if product.image]
    except Order.DoesNotExist:
        return "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", []

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@router.message(Command("order"))
async def send_order_info(message: types.Message):
    try:
        args = message.text.split()
        if len(args) < 2:
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω ID –∑–∞–∫–∞–∑–∞")

        order_id = int(args[1])  # –û–∂–∏–¥–∞–µ–º "/order <id>"
        order_info, images = get_order_info(order_id)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
        await message.answer(order_info)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        for image_path in images:
            if image_path:
                await message.answer_photo(FSInputFile(image_path))

    except (ValueError, IndexError):
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /order 123")
    except Exception as e:
        logging.exception(e)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ.")

# –û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

# –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ Django –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
class Command(BaseCommand):
    help = "–ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞"

    def handle(self, *args, **kwargs):
        import asyncio
        asyncio.run(main())
