import os
import logging
import django
from aiogram import Bot, Dispatcher, Router, types
from aiogram.types import FSInputFile, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from django.core.management.base import BaseCommand
from asgiref.sync import sync_to_async

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "Flower.settings")  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç
django.setup()

from main.models import Order, Product, Customer

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
API_TOKEN = "7792869223:AAHnV8lAFD0TiD2EhHYWFGc-ecLJfvoqiS4"

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()  # –î–ª—è FSM
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ

async def get_order_info(order_id):
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑ —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        order = await sync_to_async(
            Order.objects.prefetch_related('products').get
        )(pk=order_id)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        products = order.products.all()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        product_details = "\n".join(
            [f"{product.name} - {product.price} ‚ÇΩ" for product in products]
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
        order_info = (
            f"üõí –ó–∞–∫–∞–∑ #{order.id}\n"
            f"üì¶ –ü—Ä–æ–¥—É–∫—Ç—ã:\n{product_details}\n"
            f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {sum([p.price for p in products])} ‚ÇΩ\n"
            f"üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order.created_at.strftime('%d.%m.%Y')}\n"
            f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order.delivery_address}\n"
            f"üìù –°—Ç–∞—Ç—É—Å: {order.get_status_display()}"
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        product_images = [
            product.image.path for product in products if product.image
        ]

        return order_info, product_images
    except Order.DoesNotExist:
        return "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", []


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(Command("register"))
async def request_phone(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    button = KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[button]],  # –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=keyboard,
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(lambda message: message.contact)
async def save_telegram_id_and_check_orders(message: types.Message):
    contact = message.contact
    if contact:
        phone_number = contact.phone_number
        telegram_id = message.from_user.id

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        customer, created = await sync_to_async(Customer.objects.get_or_create)(phone=phone_number)
        customer.telegram_id = telegram_id
        await sync_to_async(customer.save)()

        # –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        orders = await sync_to_async(list)(
            Order.objects.filter(customer__phone=phone_number).select_related("customer").prefetch_related("products")
        )

        if orders:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–∫–∞–∑—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –∑–∞–∫–∞–∑–µ
            await message.answer("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –í–æ—Ç –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã:")
            for order in orders:
                products = await sync_to_async(list)(order.products.all())
                product_details = "\n".join(
                    [f"{product.name} - {product.price} ‚ÇΩ" for product in products]
                )
                order_info = (
                    f"üõí –ó–∞–∫–∞–∑ #{order.id}\n"
                    f"üì¶ –ü—Ä–æ–¥—É–∫—Ç—ã:\n{product_details}\n"
                    f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {sum([p.price for p in products])} ‚ÇΩ\n"
                    f"üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order.created_at.strftime('%d.%m.%Y')}\n"
                    f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order.delivery_address}\n"
                    f"üìù –°—Ç–∞—Ç—É—Å: {order.get_status_display()}"
                )
                await message.answer(order_info)
        else:
            # –ï—Å–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç
            await message.answer(
                "–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–æ –∑–∞–∫–∞–∑—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º, –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            )
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@router.message(Command("order"))
async def send_order_info(message: types.Message):
    try:
        args = message.text.split()
        if len(args) < 2:
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω ID –∑–∞–∫–∞–∑–∞")

        order_id = int(args[1])  # –û–∂–∏–¥–∞–µ–º "/order <id>"
        order_info, images = await get_order_info(order_id)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
        await message.answer(order_info)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        for image_path in images:
            if image_path:
                await message.answer_photo(FSInputFile(image_path))

    except (ValueError, IndexError):
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /order 123")
    except Exception as e:
        logging.exception(e)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ.")


# –û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)


# –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ Django –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
class Command(BaseCommand):
    help = "–ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞"

    def handle(self, *args, **kwargs):
        import asyncio
        asyncio.run(main())
