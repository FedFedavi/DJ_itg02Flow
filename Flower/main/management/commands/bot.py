import os
import logging
import django
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import CommandHandler, MessageHandler, Filters, Updater, CallbackContext
from django.core.management.base import BaseCommand

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "Flower.settings")
django.setup()

from main.models import Order, Customer

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
API_TOKEN = "7792869223:AAHnV8lAFD0TiD2EhHYWFGc-ecLJfvoqiS4"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
def get_order_info(order_id):
    try:
        order = Order.objects.prefetch_related('products').get(pk=order_id)
        products = order.products.all()

        product_details = "\n".join([f"{product.name} - {product.price} ‚ÇΩ" for product in products])
        order_info = (
            f"üõí –ó–∞–∫–∞–∑ #{order.id}\n"
            f"üì¶ –ü—Ä–æ–¥—É–∫—Ç—ã:\n{product_details}\n"
            f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {sum([p.price for p in products])} ‚ÇΩ\n"
            f"üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order.created_at.strftime('%d.%m.%Y')}\n"
            f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order.delivery_address}\n"
            f"üìù –°—Ç–∞—Ç—É—Å: {order.get_status_display()}"
        )

        product_images = [product.image.path for product in products if product.image]
        return order_info, product_images
    except Order.DoesNotExist:
        return "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", []

# –ö–æ–º–∞–Ω–¥–∞ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def request_phone(update: Update, context: CallbackContext):
    button = KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)
    keyboard = ReplyKeyboardMarkup([[button]], resize_keyboard=True, one_time_keyboard=True)
    update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_telegram_id_and_check_orders(update: Update, context: CallbackContext):
    contact = update.message.contact
    if contact:
        phone_number = contact.phone_number
        telegram_id = update.message.from_user.id

        try:
            # –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ
            customer, created = Customer.objects.get_or_create(phone=phone_number)
            if not created:
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram ID –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º {phone_number}")
            customer.telegram_id = telegram_id
            customer.save()

            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞
            orders = Order.objects.filter(customer__phone=phone_number).prefetch_related('products')

            if orders:
                update.message.reply_text("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –í–æ—Ç –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã:")
                for order in orders:
                    order_info, _ = get_order_info(order.id)
                    update.message.reply_text(order_info)
            else:
                update.message.reply_text(
                    "–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–æ –∑–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
                )
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
            update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
    else:
        update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")

# –ö–æ–º–∞–Ω–¥–∞ /order –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
def send_order_info(update: Update, context: CallbackContext):
    try:
        args = context.args
        if not args:
            update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /order 123")
            return

        order_id = int(args[0])
        order_info, images = get_order_info(order_id)

        update.message.reply_text(order_info)

        for image_path in images:
            if image_path:
                with open(image_path, 'rb') as image_file:
                    context.bot.send_photo(chat_id=update.effective_chat.id, photo=image_file)

    except (ValueError, IndexError):
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /order 123")
    except Exception as e:
        logger.exception(e)
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    updater = Updater(token=API_TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler("register", request_phone))
    dispatcher.add_handler(MessageHandler(Filters.contact, save_telegram_id_and_check_orders))
    dispatcher.add_handler(CommandHandler("order", send_order_info))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    updater.start_polling()
    updater.idle()

# –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ Django –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
class Command(BaseCommand):
    help = "–ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞"

    def handle(self, *args, **kwargs):
        main()
